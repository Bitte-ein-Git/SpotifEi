name: Build and Release

on:
  workflow_dispatch:
    inputs:
      SPOTURL:
        description: 'Direct URL to Spotify .ipa'
        required: true
      CHANGEVERSION:
        description: 'SpotC++ Version Number'
        required: false
      EEVEEVERSION:
        description: 'EeveeSpotify Version'
        required: false

jobs:
  build:
    runs-on: macos-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up variables
      id: setup
      run: |
        echo "EEVEEVERSION=${{ github.event.inputs.EEVEEVERSION }}" >> $GITHUB_ENV
        echo "CHANGEVERSION=${{ github.event.inputs.CHANGEVERSION }}" >> $GITHUB_ENV
        echo "SPOTURL=${{ github.event.inputs.SPOTURL }}" >> $GITHUB_ENV

    - name: Install Homebrew
      run: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
        eval "$(/opt/homebrew/bin/brew shellenv)"
  
    - name: Install dpkg
      run: brew install dpkg

    - name: Install Pyzule
      run: bash -c "$(curl https://raw.githubusercontent.com/asdfzxcvbn/pyzule/main/install-pyzule.sh)"

    - name: Set EEVEEVERSION if not provided
      if: ${{ github.event.inputs.EEVEEVERSION == '' || github.event.inputs.EEVEEVERSION == null }}
      run: |
        echo "EEVEEVERSION not provided, fetching latest release tag..."
        max_attempts=5
        attempt=0
        success=false
        while [ $attempt -lt $max_attempts ]; do
          attempt=$((attempt+1))
          echo "Attempt $attempt to fetch latest release tag..."
          REALEEVEEVERSION=$(curl -s "https://api.github.com/repos/whoeevee/EeveeSpotify/releases/latest" | jq -r '.tag_name')
          if [ -n "$REALEEVEEVERSION" ] && [ "$REALEEVEEVERSION" != "null" ]; then
            success=true
            break
          fi
          echo "Failed to fetch latest release tag, retrying..."
          sleep 5  # Wait for a short period before retrying
        done
    
        if [ "$success" = true ]; then
          echo "Successfully fetched latest release tag: $REALEEVEEVERSION"
        else
          echo "Failed to fetch the latest release tag after $max_attempts attempts. 
        fi
    
        echo "REALEEVEEVERSION=$REALEEVEEVERSION" >> $GITHUB_ENV

    - name: Set RealEeveeVersion if tag provided
      if: ${{ env.EEVEEVERSION != '' }}
      id: fetch-tags
      run: |
        EEVEEVERSION="${{ env.EEVEEVERSION }}"
        # Fetch all tags from the repository
        tags=$(curl -s https://api.github.com/repos/whoeevee/EeveeSpotify/tags | jq -r '.[].name')
        
        # Find the tag that contains the EEVEEVERSION value
        for tag in $tags; do
          if [[ $tag == *"$EEVEEVERSION"* ]]; then
            echo "REALEEVEEVERSION=$tag" >> $GITHUB_ENV
            echo "REALEEVEEVERSION: ${{ env.REALEEVEEVERSION }}"
            exit 0
          fi
        done

        # If no matching tag is found, fail the job
        echo "No matching tag found for EEVEEVERSION=$EEVEEVERSION"
        exit 1

    - name: Create Build Components folder
      run: mkdir -p "Build Components"

    - name: Set VirusTotal key as env variable
      run: echo "VIRUSTOTALKEY=${{ secrets.VIRUSTOTALKEY }}" >> $GITHUB_ENV

    - name: Download Spotify IPA
      run: |
        echo "Downloading From: ${{ github.event.inputs.SPOTURL }}"
        # Download the file using curl
        curl -LJO "${{ github.event.inputs.SPOTURL }}"
        downloaded_file=$(ls -t | head -n1)
        mv "$downloaded_file" "Build Components/"
        echo "spotifypath=Build Components/$downloaded_file" >> $GITHUB_ENV
      env:
        SPOTURL: ${{ github.event.inputs.SPOTURL }}
      
    - name: Upload Spotify IPA to VirusTotal
      if: ${{ env.VIRUSTOTALKEY }}
      uses: crazy-max/ghaction-virustotal@v4
      id: vt-spotify
      with:
        files: "${{ env.spotifypath }}"
        vt_api_key: ${{ env.VIRUSTOTALKEY }}
        
    - name: Set VirusTotal Analysis URL for Spotify IPA
      if: ${{ env.VIRUSTOTALKEY }}
      run: echo "VTVANILLASPOTIFY=${{ steps.vt-spotify.outputs.analysis }}" >> $GITHUB_ENV

    - name: Download and process Orion
      run: |
        # Download the Packages file from repo.chariz.com
        curl -sSL https://repo.chariz.com/Packages -o Packages
    
        # Use awk to find entries for dev.theos.orion14, Architecture: iphoneos-arm, find the highest version
        # extract the version, filename, SHA256 Hash, and MD5 hash
        ORIONVERSION=$(awk 'BEGIN { RS = ""; FS = "\n"; highest_version = "" } $1 ~ /^Package: dev.theos.orion14$/ && $0 ~ /Architecture: iphoneos-arm([^6]|$)/ { for (i = 1; i <= NF; i++) { if ($i ~ /^Version: /) { split($i, a, " "); version = a[2]; if (highest_version == "" || version > highest_version) { highest_version = version } } } } END { if (highest_version != "") print highest_version }' Packages)
        echo "Orion Version Extracted: $ORIONVERSION"
        FILENAME=$(awk 'BEGIN{RS="";FS="\n";highest_version=""} $1~/^Package: dev.theos.orion14$/ && $0~/Architecture: iphoneos-arm/{current_version="";current_filename="";for(i=1;i<=NF;i++){if($i~/^Version: /){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^Filename: /){split($i,a," ");current_filename=a[2]}}if(highest_version==""||current_version>highest_version){highest_version=current_version;highest_filename=current_filename}} END{if(highest_version!="")print highest_filename}' Packages)
        echo "Orion FileName Extracted: $FILENAME"
        SHA256=$(awk 'BEGIN{RS="";FS="\n";highest_version="";sha256="noSHA"} $1~/^Package: dev.theos.orion14$/ && $0~/Architecture: iphoneos-arm/{current_version="";sha256_found=0;for(i=1;i<=NF;i++){if($i~/^Version: /){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^SHA256: /){split($i,a," ");sha256=a[2];sha256_found=1}}if(highest_version==""||current_version>highest_version){highest_version=current_version;if(sha256_found==1){highest_sha256=sha256}else{highest_sha256="noSHA"}}}END{if(highest_version!="")print highest_sha256}' Packages)
        echo "Orion SHA256 Hash Extracted: $SHA256"
        MD5=$(awk 'BEGIN{RS="";FS="\n";highest_version="";md5sum="noMD5"} $1~/^Package: dev.theos.orion14$/ && $0~/Architecture: iphoneos-arm/{current_version="";for(i=1;i<=NF;i++){if($i~/^Version: /){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^MD5Sum: /){split($i,a," ");md5sum=a[2]}}if(highest_version==""||current_version>highest_version){highest_version=current_version;highest_md5sum=md5sum}} END{if(highest_version!="")print highest_md5sum}' Packages)
        echo "Orion MD5 Hash Extracted: $MD5"

        echo "Downloading From: https://repo.chariz.com/$FILENAME"
        # Download the file using curl
        curl -LJO "https://repo.chariz.com/$FILENAME"
        downloaded_file=$(ls -t | head -n1)
        mv "$downloaded_file" "Build Components/"
        orion="Build Components/$downloaded_file"
        echo "orion path: $orion"

        
        #Check Hash
        if [[ "${SHA256}" != "noSHA" ]]; then
          echo "Expected SHA256 Hash: ${SHA256}"
          calculated_sha256=$(shasum -a 256 "$orion" | awk '{print $1}')
          echo "Calculated SHA256 Hash: $calculated_sha256"
          if [[ "${calculated_sha256}" == "${SHA256}" ]]; then
            echo "SHA256 matches. Continuing..."
          else
            echo "SHA256 does not match."
            exit 1
          fi
        elif [[ "${MD5}" != "noMD5" ]]; then
          echo "Expected MD5 Hash: ${MD5}"
          calculated_md5=$(md5 -q "$orion" | awk '{print $1}')
          echo "Calculated MD5 Hash: $calculated_md5"
          if [[ "${calculated_md5}" == "${MD5}" ]]; then
            echo "MD5 matches. Continuing..."
          else
            echo "MD5 does not match."
            exit 1
          fi
        else
          echo "Neither SHA256 nor MD5 is valid"
          exit 1
        fi

        #CleanUp
        rm -f Packages

        #Set Env Varibles
        echo "orion=Build Components/$downloaded_file" >> $GITHUB_ENV
        echo "ORIONVERSION=$ORIONVERSION" >> $GITHUB_ENV
        
    - name: Upload Orion to VirusTotal
      if: ${{ env.VIRUSTOTALKEY }}
      uses: crazy-max/ghaction-virustotal@v4
      id: vt-orion
      with:
        files: "${{ env.orion }}"
        vt_api_key: ${{ env.VIRUSTOTALKEY }}
        
    - name: Set VirusTotal Analysis URL for Orion
      if: ${{ env.VIRUSTOTALKEY }}
      run: echo "VTORION=${{ steps.vt-orion.outputs.analysis }}" >> $GITHUB_ENV
    
    - name: Download and process Sposify
      run: |
        # Download the Packages file
        curl -sSL https://repo.dynastic.co/Packages -o Packages
    
        # Use awk to find entries for com.spos, Architecture: iphoneos-arm, find the highest version
        # extract the version, filename, SHA256 Hash, and MD5 hash
        SPOSIFYVERSION=$(awk 'BEGIN { RS = ""; FS = "\n"; highest_version = "" } $1 ~ /^Package: com.spos$/ && $0 ~ /Architecture: iphoneos-arm([^6]|$)/ { for (i = 1; i <= NF; i++) { if ($i ~ /^Version: /) { split($i, a, " "); version = a[2]; if (highest_version == "" || version > highest_version) { highest_version = version } } } } END { if (highest_version != "") print highest_version }' Packages)
        echo "Sposify Version Extracted: $SPOSIFYVERSION"
        FILENAME=$(awk 'BEGIN{RS="";FS="\n";highest_version=""} $1~/^Package: com.spos$/ && $0~/Architecture: iphoneos-arm/{current_version="";current_filename="";for(i=1;i<=NF;i++){if($i~/^Version: /){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^Filename: /){split($i,a," ");current_filename=a[2]}}if(highest_version==""||current_version>highest_version){highest_version=current_version;highest_filename=current_filename}} END{if(highest_version!="")print highest_filename}' Packages)
        echo "Sposify FileName Extracted: $FILENAME"
        SHA256=$(awk 'BEGIN{RS="";FS="\n";highest_version="";sha256="noSHA"} $1~/^Package: com.spos$/ && $0~/Architecture: iphoneos-arm/{current_version="";sha256_found=0;for(i=1;i<=NF;i++){if($i~/^Version: /){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^SHA256: /){split($i,a," ");sha256=a[2];sha256_found=1}}if(highest_version==""||current_version>highest_version){highest_version=current_version;if(sha256_found==1){highest_sha256=sha256}else{highest_sha256="noSHA"}}}END{if(highest_version!="")print highest_sha256}' Packages)
        echo "Sposify SHA256 Hash Extracted: $SHA256"
        MD5=$(awk 'BEGIN{RS="";FS="\n";highest_version="";md5sum="noMD5"} $1~/^Package: com.spos$/ && $0~/Architecture: iphoneos-arm/{current_version="";for(i=1;i<=NF;i++){if($i~/^Version: /){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^MD5Sum: /){split($i,a," ");md5sum=a[2]}}if(highest_version==""||current_version>highest_version){highest_version=current_version;highest_md5sum=md5sum}} END{if(highest_version!="")print highest_md5sum}' Packages)
        echo "Sposify MD5 Hash Extracted: $MD5"

        echo "Downloading From: https://repo.dynastic.co/$FILENAME"
        # Download the file using curl
        curl -LJO "https://repo.dynastic.co/$FILENAME"
        downloaded_file=$(ls -t | head -n1)
        mv "$downloaded_file" "Build Components/"
        sposify="Build Components/$downloaded_file"
        echo "Sposify path: $sposify"
        
        #Check Hash
        if [[ "${SHA256}" != "noSHA" ]]; then
          echo "Expected SHA256 Hash: ${SHA256}"
          calculated_sha256=$(shasum -a 256 "$sposify" | awk '{print $1}')
          echo "Calculated SHA256 Hash: $calculated_sha256"
          if [[ "${calculated_sha256}" == "${SHA256}" ]]; then
            echo "SHA256 matches. Continuing..."
          else
            echo "SHA256 does not match."
            exit 1
          fi
        elif [[ "${MD5}" != "noMD5" ]]; then
          echo "Expected MD5 Hash: ${MD5}"
          calculated_md5=$(md5 -q "$sposify" | awk '{print $1}')
          echo "Calculated MD5 Hash: $calculated_md5"
          if [[ "${calculated_md5}" == "${MD5}" ]]; then
            echo "MD5 matches. Continuing..."
          else
            echo "MD5 does not match."
            exit 1
          fi
        else
          echo "Neither SHA256 nor MD5 is valid"
          exit 1
        fi

        #CleanUp
        rm -f Packages

        #Set Env Varibles
        echo "sposify=Build Components/$downloaded_file" >> $GITHUB_ENV
        echo "SPOSIFYVERSION=$SPOSIFYVERSION" >> $GITHUB_ENV

    
    - name: Upload Sposify to VirusTotal
      if: ${{ env.VIRUSTOTALKEY }}
      uses: crazy-max/ghaction-virustotal@v4
      id: vt-sposify
      with:
        files: "${{ env.sposify }}"
        vt_api_key: ${{ env.VIRUSTOTALKEY }}
        
    - name: Set VirusTotal Analysis URL for Sposify
      if: ${{ env.VIRUSTOTALKEY }}
      run: echo "VTSPOSIFY=${{ steps.vt-sposify.outputs.analysis }}" >> $GITHUB_ENV

    - name: Download and process SposifyFix
      run: |
        # Download the Packages file
        curl -sSL https://level3tjg.me/repo/Packages -o Packages
    
        # Use awk to find entries for dev.theos.orion14, Architecture: iphoneos-arm, find the highest version
        # extract the version, filename, SHA256 Hash, and MD5 hash
        SPOSIFYFIXVERSION=$(awk 'BEGIN { RS = ""; FS = "\n"; highest_version = "" } $1 ~ /^Package: com.level3tjg.sposifyfix$/ && $0 ~ /Architecture: iphoneos-arm([^6]|$)/ { for (i = 1; i <= NF; i++) { if ($i ~ /^Version: /) { split($i, a, " "); version = a[2]; if (highest_version == "" || version > highest_version) { highest_version = version } } } } END { if (highest_version != "") print highest_version }' Packages)
        echo "SposifyFix Version Extracted: $SPOSIFYFIXVERSION"
        FILENAME=$(awk 'BEGIN{RS="";FS="\n";highest_version=""} $1~/^Package: com.level3tjg.sposifyfix$/ && $0~/Architecture: iphoneos-arm/{current_version="";current_filename="";for(i=1;i<=NF;i++){if($i~/^Version: /){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^Filename: /){split($i,a," ");current_filename=a[2]}}if(highest_version==""||current_version>highest_version){highest_version=current_version;highest_filename=current_filename}} END{if(highest_version!="")print highest_filename}' Packages)
        echo "SposifyFix FileName Extracted: $FILENAME"
        SHA256=$(awk 'BEGIN{RS="";FS="\n";highest_version="";sha256="noSHA"} $1~/^Package: com.level3tjg.sposifyfix$/ && $0~/Architecture: iphoneos-arm/{current_version="";sha256_found=0;for(i=1;i<=NF;i++){if($i~/^Version: /){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^SHA256: /){split($i,a," ");sha256=a[2];sha256_found=1}}if(highest_version==""||current_version>highest_version){highest_version=current_version;if(sha256_found==1){highest_sha256=sha256}else{highest_sha256="noSHA"}}}END{if(highest_version!="")print highest_sha256}' Packages)
        echo "SposifyFix SHA256 Hash Extracted: $SHA256"
        MD5=$(awk 'BEGIN{RS="";FS="\n";highest_version="";md5sum="noMD5"} $1~/^Package: ccom.level3tjg.sposifyfix$/ && $0~/Architecture: iphoneos-arm/{current_version="";for(i=1;i<=NF;i++){if($i~/^Version: /){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^MD5Sum: /){split($i,a," ");md5sum=a[2]}}if(highest_version==""||current_version>highest_version){highest_version=current_version;highest_md5sum=md5sum}} END{if(highest_version!="")print highest_md5sum}' Packages)
        echo "SposifyFix MD5 Hash Extracted: $MD5"

        echo "Downloading From: https://level3tjg.me/repo/Packages/$FILENAME"
        # Download the file using curl
        curl -LJO "https://level3tjg.me/repo/$FILENAME"
        downloaded_file=$(ls -t | head -n1)
        mv "$downloaded_file" "Build Components/"
        sposifyfix="Build Components/$downloaded_file"
        echo "SposifyFix path: $sposifyfix"
        
        #Check Hash
        if [[ "${SHA256}" != "noSHA" ]]; then
          echo "Expected SHA256 Hash: ${SHA256}"
          calculated_sha256=$(shasum -a 256 "$sposifyfix" | awk '{print $1}')
          echo "Calculated SHA256 Hash: $calculated_sha256"
          if [[ "${calculated_sha256}" == "${SHA256}" ]]; then
            echo "SHA256 matches. Continuing..."
          else
            echo "SHA256 does not match."
            exit 1
          fi
        elif [[ "${MD5}" != "noMD5" ]]; then
          echo "Expected MD5 Hash: ${MD5}"
          calculated_md5=$(md5 -q "$sposifyfix" | awk '{print $1}')
          echo "Calculated MD5 Hash: $calculated_md5"
          if [[ "${calculated_md5}" == "${MD5}" ]]; then
            echo "MD5 matches. Continuing..."
          else
            echo "MD5 does not match."
            exit 1
          fi
        else
          echo "Neither SHA256 nor MD5 is valid"
          exit 1
        fi

        #CleanUp
        rm -f Packages

        #Set Env Varibles
        echo "sposifyfix=Build Components/$downloaded_file" >> $GITHUB_ENV
        echo "SPOSIFYFIXVERSION=$SPOSIFYFIXVERSION" >> $GITHUB_ENV
    
    - name: Upload SposifyFix to VirusTotal
      if: ${{ env.VIRUSTOTALKEY }}
      uses: crazy-max/ghaction-virustotal@v4
      id: vt-sposifyfix
      with:
        files: "${{ env.sposifyfix }}"
        vt_api_key: ${{ env.VIRUSTOTALKEY }}
        
    - name: Set VirusTotal Analysis URL for SposifyFix
      if: ${{ env.VIRUSTOTALKEY }}
      run: echo "VTSPOSIFYFIX=${{ steps.vt-sposifyfix.outputs.analysis }}" >> $GITHUB_ENV

    - name: Download EeveeSpotify .deb files
      run: |
        eevee_asset=$(curl -s https://api.github.com/repos/whoeevee/EeveeSpotify/releases/tags/${{ env.REALEEVEEVERSION }} | jq -r '.assets[] | select(.name | startswith("com.eevee.spotify") and endswith("iphoneos-arm.deb")).browser_download_url')
        echo "Downloading From: $eevee_asset"
        # Download the file using curl
        curl -LJO "$eevee_asset"
        downloaded_file=$(ls -t | head -n1)
        mv "$downloaded_file" "Build Components/"
        echo "eevee-arm=Build Components/$downloaded_file" >> $GITHUB_ENV
      env:
        REALEEVEEVERSION: ${{ env.REALEEVEEVERSION }}
    
    - name: Upload EeveeSpotify to VirusTotal
      if: ${{ env.VIRUSTOTALKEY }}
      uses: crazy-max/ghaction-virustotal@v4
      id: vt-eevee
      with:
        files: "${{ env.eevee-arm }}"
        vt_api_key: ${{ env.VIRUSTOTALKEY }}
        
    - name: Set VirusTotal Analysis URL for EeveeSpotify
      if: ${{ env.VIRUSTOTALKEY }}
      run: echo "VTEEVEE=${{ steps.vt-eevee.outputs.analysis }}" >> $GITHUB_ENV

    - name: Download SwiftProtobuf .deb file
      run: |
        protobuf_asset=$(curl -s https://api.github.com/repos/whoeevee/EeveeSpotify/releases/tags/${{ env.REALEEVEEVERSION }} | jq -r '.assets[] | select(.name | startswith("org.swift.protobuf.swiftprotobuf") and endswith("iphoneos-arm.deb")).browser_download_url')
        echo "Downloading From: $protobuf_asset"
        # Download the file using curl
        curl -LJO "$protobuf_asset"
        downloaded_file=$(ls -t | head -n1)
        mv "$downloaded_file" "Build Components/"
        echo "swiftprotobuf=Build Components/$downloaded_file" >> $GITHUB_ENV
        filename=$(basename "${protobuf_asset}")
        protobuf_version=$(echo "${filename}" | sed -n 's/org.swift.protobuf.swiftprotobuf_\([^-]*\)_iphoneos-arm.deb/\1/p')
        echo "SWIFTPROTOBUFVERSION=${protobuf_version}" >> $GITHUB_ENV
      env:
        REALEEVEEVERSION: ${{ env.REALEEVEEVERSION }}
    
    - name: Upload SwiftProtobuf to VirusTotal
      if: ${{ env.VIRUSTOTALKEY }}
      uses: crazy-max/ghaction-virustotal@v4
      id: vt-swiftprotobuf
      with:
        files: "${{ env.swiftprotobuf }}"
        vt_api_key: ${{ env.VIRUSTOTALKEY }}
        
    - name: Set VirusTotal Analysis URL for SwiftProtobuf
      if: ${{ env.VIRUSTOTALKEY }}
      run: echo "VTSWIFTPROTOBUF=${{ steps.vt-swiftprotobuf.outputs.analysis }}" >> $GITHUB_ENV

    - name: Clone OpenSpotifySafariExtension
      run: git clone https://github.com/whoeevee/OpenSpotifySafariExtension
    
    - name: Copy OpenSpotifySafariExtension.appex to Build Components
      run: |
        cp -R OpenSpotifySafariExtension/OpenSpotifySafariExtension.appex "Build Components/OpenSpotifySafariExtension.appex"
        echo "EXTCOMMIT=$(git -C OpenSpotifySafariExtension rev-parse --short HEAD)" >> $GITHUB_ENV
    
    - name: Compress OpenSpotifySafariExtension to zip
      run: |
        cd OpenSpotifySafariExtension
        echo "Compressing:"
        ls
        ditto -c -k --sequesterRsrc --keepParent ./ "../Build Components/OpenSpotifySafariExtension.zip"
    
    - name: Upload OpenSpotifySafariExtension to VirusTotal
      if: ${{ env.VIRUSTOTALKEY }}
      uses: crazy-max/ghaction-virustotal@v4
      id: vt-openspotify
      with:
        files: "Build Components/OpenSpotifySafariExtension.zip"
        vt_api_key: ${{ env.VIRUSTOTALKEY }}
        
    - name: Set VirusTotal Analysis URL for OpenSpotifySafariExtension
      if: ${{ env.VIRUSTOTALKEY }}
      run: echo "VTEXT=${{ steps.vt-openspotify.outputs.analysis }}" >> $GITHUB_ENV

    - name: Duplicate and unzip Spotify.ipa
      run: |
        cp "${{ env.spotifypath }}" "Build Components/SpotifyAnylises.zip"
        unzip "Build Components/SpotifyAnylises.zip" -d "Build Components"
    
    - name: Extract info.plist from Spotify
      run: |
        cd "Build Components"
        cp Payload/Spotify.app/Info.plist "Info.plist"
        echo "VANILLASPOTIFYVERSION=$(/usr/libexec/PlistBuddy -c "Print :SpotifyVersionShort" Info.plist)" >> $GITHUB_ENV
    
    - name: Modify Spotify with OpenSpotifySafariExtension.appex
      run: |
        cd "Build Components"
        cp -R "OpenSpotifySafariExtension.appex" Payload/Spotify.app/PlugIns/
        ditto -c -k --sequesterRsrc --keepParent "Payload" "SpotifyEXT.zip"
        echo "spotifyEXTpath=Build Components/SpotifyEXT.ipa" >> $GITHUB_ENV
        
        #Clean Up
        rm -rf Payload
        rm -f SpotifyAnylises.zip
        rm -f Info.plist
        rm -f OpenSpotifySafariExtension.zip
        rm -rf OpenSpotifySafariExtension.appex
    
    - name: Set Change Version
      id: set-change-version
      run: |
        CHANGEVERSION="${{ github.event.inputs.CHANGEVERSION }}"
        if [ -z "$CHANGEVERSION" ]; then
          latest_tag=$(curl -s https://api.github.com/repos/SpotCompiled/SpotC-Plus-Plus/releases/latest | jq -r .tag_name)
          base_version=${latest_tag#v}
          IFS='.' read -ra ADDR <<< "$base_version"
          last_number=${ADDR[2]}
          new_last_number=$((last_number + 1))
          CHANGEVERSION="${ADDR[0]}.${ADDR[1]}.$new_last_number"
        fi
        echo "CHANGEVERSION=$CHANGEVERSION" >> $GITHUB_ENV

    - name: Set Components Path
      run: echo "componentspath=Build Components" >> $GITHUB_ENV
    
    - name: Run Pyzule
      run: pyzule -i "${{ env.spotifyEXTpath }}" -o "${{ env.componentspath }}/SpotifyPatched.ipa" -v ${{ env.CHANGEVERSION }} -b com.yodaluca23.SpotCPlusPlus -f "${{ env.sposifyfix }}" "${{ env.sposify }}" "${{ env.orion }}" "${{ env.swiftprotobuf }}" "${{ env.eevee-arm }}" -u

    - name: Upload SpotifyPatched.ipa to VirusTotal
      if: ${{ env.VIRUSTOTALKEY }}
      uses: crazy-max/ghaction-virustotal@v4
      id: vt-spotc
      with:
        files: "${{ env.componentspath }}/SpotifyPatched.ipa"
        vt_api_key: ${{ env.VIRUSTOTALKEY }}
        
    - name: Set VirusTotal Analysis URL for SpotC++
      if: ${{ env.VIRUSTOTALKEY }}
      run: echo "VTSPOTC=${{ steps.vt-spotc.outputs.analysis }}" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: "v${{ env.CHANGEVERSION }}"
        name: "SpotC++ v${{ env.CHANGEVERSION }}"
        draft: true
        files: ${{ env.componentspath }}/SpotifyPatched.ipa
        file_glob: true
        body: |
          ## ChangeLog
          - Updated [EeveeSpotify](https://github.com/whoeevee/EeveeSpotify) to ${{ env.REALEEVEEVERSION }}
          $(curl -s https://api.github.com/repos/whoeevee/EeveeSpotify/releases/tags/${{ env.REALEEVEEVERSION }} | jq -r '.body' | sed 's/^/- (EeveeSpotify) /')
          - Updated Spotify to version ${{ env.VANILLASPOTIFYVERSION }}
          ***
          Vanilla IPA decrypted using [a fork of BagBak](https://github.com/TbhLovers/bagbak), on my personal MacBook Air and Jailbroken iPhone XR running [Dopamine](https://github.com/opa334/Dopamine), feel free to contact me with questions about this environment.
          App .ipa modified and tweaks injected using Pyzule with the github Action Workflow.

          $(if [ -n "${{ secrets.VIRUSTOTALKEY }}" ]; then
          echo "<details>
          <summary>Version Details & VirusTotal Results</summary><br>

          Spotify Version: v${{ env.VANILLASPOTIFYVERSION }}
          [Vanilla Spotify VirusTotal](${{ env.VTVANILLASPOTIFY }})<br>
          EeveeSpotify Version: ${{ env.REALEEVEEVERSION }}
          [EeveeSpotify .deb VirusTotal](${{ env.VTEEVEE }})<br>
          Sposify v${{ env.SPOSIFYVERSION }}
          [Sposify VirusTotal](${{ env.VTSPOSIFY }})<br>
          OpenSpotifySafariExtension Commit: ${{ env.EXTCOMMIT }}
          [OpenSpotifySafariExtension Repo Compressed .zip VirusTotal](${{ env.VTEXT }})<br>
          Sposify Fix v${{ env.SPOSIFYFIXVERSION }}
          [Sposify Fix VirusTotal](${{ env.VTSPOSIFYFIX }})<br>
          Orion Runtime (iOS 14 - 16) v${{ env.ORIONVERSION }}
          [Orion Runtime (iOS 14 - 16) .deb VirusTotal](${{ env.VTORION }})<br>
          SwiftProtobuf Framework v${{ env.SWIFTPROTOBUFVERSION }}
          [SwiftProtobuf Framework .deb VirusTotal](${{ env.VTSWIFTPROTOBUF }})<br>
          SpotC++ Version: v${{ env.CHANGEVERSION }}
          [SpotC++ VirusTotal](${{ env.VTSPOTC }})

          <br>
          </details>"; fi)
